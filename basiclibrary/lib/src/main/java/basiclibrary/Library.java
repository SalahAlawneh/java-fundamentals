/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

    public static void main(String[] args) {

    }

    public static int[] roll(int n) {
        int[] valuesOfRolling = new int[n];
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            int rollValue = random.nextInt(6) + 1;
            valuesOfRolling[i] = rollValue;
        }
        return valuesOfRolling;
    }

    public static boolean containsDuplicates(int array[]) {
        boolean checker = false;
        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                if (array[i] == array[j]) {
                    checker = true;
                }
            }
        }
        return checker;
    }

    public static int calculatingAverages(int array[]) {
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        int average = sum / array.length;
        return average;
    }

    public static int[] matrixRowsAvg(int[][] matrix) {
        int arrayOfAvgRows[] = new int[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            arrayOfAvgRows[i] = calculatingAverages(matrix[i]);
        }
        int smallestRowAvgIndex = arrayOfAvgRows[0];
        for (int j = 0; j < matrix.length; j++) {
            if (smallestRowAvgIndex > arrayOfAvgRows[j]) {
                smallestRowAvgIndex = j;
            }
        }
        return matrix[smallestRowAvgIndex];
    }

    public static String analyzingWeatherData(int[][] weeklyMonthTemperatures) {
        String neverSaw = "";
        HashSet<Integer> allTemp = new HashSet<Integer>();
        for (int i = 0; i < weeklyMonthTemperatures.length; i++) {
            for (int j = 0; j < 7; j++) {
                allTemp.add(weeklyMonthTemperatures[i][j]);
            }
        }
        for (int i = Collections.min(allTemp); i <= (Collections.max(allTemp)); i++) {
            if (!allTemp.contains(i)) {
                neverSaw = neverSaw + "Never saw temperature: " + i + "\n";
            }
        }

        String analyzedData = "High: " + Collections.max(allTemp) + "\nLow: " + Collections.min(allTemp) + "\n"
                + neverSaw;
        return analyzedData;
    }

    public static String tally(List<String> votes) {
        String winner = "";
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        for (String candidate : votes) {
            if (map.keySet().contains(candidate)) {
                map.put(candidate, map.get(candidate) + 1);
            } else {
                map.put(candidate, 1);
            }
        }
        int maxVotesNum = 0;
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            String candidate = entry.getKey();
            Integer votesNumber = entry.getValue();
            if (votesNumber > maxVotesNum) {
                maxVotesNum = votesNumber;
                winner = entry.getKey();
            }

        }
        String theWinner = winner + " received the most votes!";
        return theWinner;
    }


}
